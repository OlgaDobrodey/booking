@startuml

actor "Guest" as user
participant "Gateway" as gw
participant "Booking App" as bs
participant "Hotel App" as hs
participant "user App" as us

database "BookingDB" as db
database "HotelDB" as hb

==Booking room==
    activate user
user -> gw :POST\n /users/{id}/bookings
    activate gw
gw -> bs: send request\nto book room
    activate bs
bs -> bs: check that the requested\nperiod is valid

bs -> bs: Exception\n<font color=red>(if period is more than 1 year )
bs-> hs: select free room
    activate hs
hs -> hb: select free room
     activate hb
hb -> hs: return free room
    deactivate hb
hs -> hs: check minimum\nrequirements
hs -> hs: Exception\n<font color=red>(if room is busy or\n <font color=red>MR are not met)
hs -> bs: return room
    deactivate hs

bs -> us: send request change\n an account balance
    activate us
us -> us: function pay\nfor the room
us -> us: Exception\n<font color=red>( if account balance is not enough)
us -> bs: return cost
     deactivate us
bs -> db: insert a new booking\n with status active
    activate db
db -> bs: return new booking
    deactivate db
bs -> gw: return\nthe booking view
gw -> user: return\nthe booking view

==Exception==

alt <font color=red> if "condition"
bs -> bs: throw exception
bs-> gw: return\n<b>"Exception message"
gw -> user: return\n<b>"Exception message"
end

@enduml